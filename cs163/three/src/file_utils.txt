// fill a sting until a pattern
// int fill_from_str(ToParse *to_parse, char *&to_fill, int stop) {
//     if (stop == -1) {
//         return -1;
//     }
//
//     // make a temporary array to hold the data from the source string
//     char *temp = new char[to_parse->max_size];
//     // get the full source length as a default stopping condition
//     int parse_len = strlen(to_parse->source);
//
//     // instantiate i and target outside the loop to use later in the
//     function int i = 0; int end = stop;
//     // fill a given sting hard code a pattern for ease of use
//     for (; i < parse_len && to_parse->source[end] != '$'; ++i, ++end) {
//         temp[i] = to_parse->source[end];
//     }
//
//     // if i is 0 then noting was done and so an error is in the file
//     if (i == 0) {
//         end = -1;
//
//     } else {
//         // cap off the string
//         temp[i] = '\0';
//
//         // now make a perfectly fitting array for the segment
//         to_fill = new char[strlen(temp)];
//
//         // copy the segment in to the given array
//         strcpy(to_fill, temp);
//     }
//
//     // remove the temporary array
//     delete[] temp;
//
//     // return new end
//     return end;
// }
//
// bool parse_and_add(ToParse *to_parse, char *&new_key, HouseData *to_fill)
// {
//     int stopped = 0;
//
//     char delimiter[] = "$";
//
//     char *split = strtok(to_parse->source, delimiter);
//
//     // fill the key first
//     stopped = fill_from_str(to_parse, new_key, stopped);
//     // add 1 to the stopped variable to skip the last $ char
//     stopped = fill_from_str(to_parse, to_fill->distance_to_psu, stopped +
//     1); stopped = fill_from_str(to_parse, to_fill->size, stopped + 1);
//     stopped = fill_from_str(to_parse, to_fill->bedrooms, stopped + 1);
//     stopped = fill_from_str(to_parse, to_fill->location, stopped + 1);
//     stopped = fill_from_str(to_parse, to_fill->notes, stopped + 1);
//     // TODO: maybe do a few checks if the data is correct
//
//     return stopped;
// }

// <----------
